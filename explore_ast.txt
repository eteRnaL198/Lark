FileAST:  (at None)
  Typedef: Node, [], ['typedef'] (at <none>:2:17)
    TypeDecl: Node, [], None (at <none>:2:17)
      IdentifierType: ['int'] (at <none>:2:13)
  Typedef: Hash, [], ['typedef'] (at <none>:2:23)
    TypeDecl: Hash, [], None (at <none>:2:23)
      IdentifierType: ['int'] (at <none>:2:13)
  FuncDef:  (at <none>:4:10)
    Decl: HashPrint, [], [], [], [] (at <none>:4:10)
      FuncDecl:  (at <none>:4:10)
        ParamList:  (at <none>:4:24)
          Decl: hash, [], [], [], [] (at <none>:4:24)
            PtrDecl: [] (at <none>:4:24)
              TypeDecl: hash, [], None (at <none>:4:26)
                IdentifierType: ['Hash'] (at <none>:4:20)
          Decl: PrintFunc, [], [], [], [] (at <none>:4:38)
            PtrDecl: [] (at <none>:4:38)
              FuncDecl:  (at <none>:4:38)
                ParamList:  (at <none>:0:1)
                  Typename: None, [], None (at <none>:0:1)
                    PtrDecl: [] (at <none>:4:54)
                      TypeDecl: None, [], None (at None)
                        IdentifierType: ['char'] (at <none>:4:50)
                  Typename: None, [], None (at <none>:0:1)
                    PtrDecl: [] (at <none>:4:61)
                      TypeDecl: None, [], None (at None)
                        IdentifierType: ['char'] (at <none>:4:57)
                TypeDecl: PrintFunc, [], None (at <none>:4:39)
                  IdentifierType: ['void'] (at <none>:4:32)
        TypeDecl: HashPrint, [], None (at <none>:4:10)
          IdentifierType: ['void'] (at <none>:4:5)
    Compound:  (at <none>:5:1)
      Decl: i, [], [], [], [] (at <none>:6:22)
        TypeDecl: i, [], None (at <none>:6:22)
          IdentifierType: ['unsigned', 'int'] (at <none>:6:9)
      If:  (at <none>:8:9)
        BinaryOp: || (at <none>:8:13)
          BinaryOp: == (at <none>:8:13)
            ID: hash (at <none>:8:13)
            ID: NULL (at <none>:8:21)
          BinaryOp: == (at <none>:8:29)
            StructRef: -> (at <none>:8:29)
              ID: hash (at <none>:8:29)
              ID: heads (at <none>:8:35)
            ID: NULL (at <none>:8:44)
        Return:  (at <none>:9:13)
      For:  (at <none>:11:9)
        Assignment: = (at <none>:11:14)
          ID: i (at <none>:11:14)
          Constant: int, 0 (at <none>:11:18)
        BinaryOp: < (at <none>:11:21)
          ID: i (at <none>:11:21)
          StructRef: -> (at <none>:11:25)
            ID: hash (at <none>:11:25)
            ID: table_size (at <none>:11:31)
        UnaryOp: ++ (at <none>:11:45)
          ID: i (at <none>:11:45)
        Compound:  (at <none>:12:1)
          Decl: temp, [], [], [], [] (at <none>:13:17)
            PtrDecl: [] (at <none>:13:17)
              TypeDecl: temp, [], None (at <none>:13:19)
                IdentifierType: ['Node'] (at <none>:13:13)
            ArrayRef:  (at <none>:13:26)
              StructRef: -> (at <none>:13:26)
                ID: hash (at <none>:13:26)
                ID: heads (at <none>:13:32)
              ID: i (at <none>:13:38)
          While:  (at <none>:15:13)
            BinaryOp: != (at <none>:15:20)
              ID: temp (at <none>:15:20)
              ID: NULL (at <none>:15:28)
            Compound:  (at <none>:16:1)
              FuncCall:  (at <none>:17:17)
                ID: PrintFunc (at <none>:17:17)
                ExprList:  (at <none>:17:27)
                  StructRef: -> (at <none>:17:27)
                    StructRef: -> (at <none>:17:27)
                      ID: temp (at <none>:17:27)
                      ID: entry (at <none>:17:33)
                    ID: key (at <none>:17:40)
                  StructRef: -> (at <none>:17:45)
                    StructRef: -> (at <none>:17:45)
                      ID: temp (at <none>:17:45)
                      ID: entry (at <none>:17:51)
                    ID: value (at <none>:17:58)
              Assignment: = (at <none>:18:17)
                ID: temp (at <none>:18:17)
                StructRef: -> (at <none>:18:24)
                  ID: temp (at <none>:18:24)
                  ID: next (at <none>:18:30)
FuncDef: 
  Decl: HashPrint, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: hash, [], [], [], []
          PtrDecl: []
            TypeDecl: hash, [], None
              IdentifierType: ['Hash']
        Decl: PrintFunc, [], [], [], []
          PtrDecl: []
            FuncDecl: 
              ParamList: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['char']
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['char']
              TypeDecl: PrintFunc, [], None
                IdentifierType: ['void']
      TypeDecl: HashPrint, [], None
        IdentifierType: ['void']
  Compound: 
    Decl: i, [], [], [], []
      TypeDecl: i, [], None
        IdentifierType: ['unsigned', 'int']
    If: 
      BinaryOp: ||
        BinaryOp: ==
          ID: hash
          ID: NULL
        BinaryOp: ==
          StructRef: ->
            ID: hash
            ID: heads
          ID: NULL
      Return: 
    For: 
      Assignment: =
        ID: i
        Constant: int, 0
      BinaryOp: <
        ID: i
        StructRef: ->
          ID: hash
          ID: table_size
      UnaryOp: ++
        ID: i
      Compound: 
        Decl: temp, [], [], [], []
          PtrDecl: []
            TypeDecl: temp, [], None
              IdentifierType: ['Node']
          ArrayRef: 
            StructRef: ->
              ID: hash
              ID: heads
            ID: i
        While: 
          BinaryOp: !=
            ID: temp
            ID: NULL
          Compound: 
            FuncCall: 
              ID: PrintFunc
              ExprList: 
                StructRef: ->
                  StructRef: ->
                    ID: temp
                    ID: entry
                  ID: key
                StructRef: ->
                  StructRef: ->
                    ID: temp
                    ID: entry
                  ID: value
            Assignment: =
              ID: temp
              StructRef: ->
                ID: temp
                ID: next
