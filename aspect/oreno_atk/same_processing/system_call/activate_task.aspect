aspect ActivateTask extends Processing {
  super(
    ActivateTask, OSServiceId_ActivateTask,
    LOG_ACTTSK_LEAVE,
    GlbTaskType,
    TCL_TASK|TCL_ISR2,
    ercd
  )
  constructor(
    call_os,
    request_sending_service,
    get_return_value,
  )

  void set_flg() { }
  
  void after_sending_msg() {
    if (ercd != E_OK) {
      _errorhook_par1.tskid = TSKID(tskid_store);
      call_errorhook(ercd, OSServiceId_ActivateTask);
    }
  }
  
  void local_system_call() {
    if (tcb_tstat[TSKID(glbtskid)] == TS_DORMANT) {
      if ((make_active(TSKID(glbtskid))) && (callevel == TCL_TASK)) {
          dispatch();
      }
    }
    else if (tcb_actcnt[TSKID(glbtskid)] < tinib_maxact[TSKID(glbtskid)]) {
      tcb_actcnt[TSKID(glbtskid)] += 1;
    } else {
      ercd = E_OS_LIMIT;
      goto d_error_exit;
    }
  }

  void after_set_tsk_location() {
    if (tsk_location == this.call_os) {
      this.set_flg()
      this.request_sending_service(glbtskid_store, OSServiceId_ActivateTask, 0xFFFFFFFF)
      ercd = (UINT8)(this.get_return_value());
      this.after_sending_msg()
    }
  }
}