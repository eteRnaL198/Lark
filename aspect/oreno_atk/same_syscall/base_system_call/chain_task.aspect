abstract aspect SystemCall extends BaseSystemCall {
  super(
    ChainTask, OSServiceId_ChainTask,
    LOG_CHNTSK_LEAVE,
    GlbTaskType,
    TCL_TASK,
    ercd
  )
  constructor(
    call_os,
    request_sending_service,
    get_return_value,
  )

  void local_system_call() {
    if( (TSKID(glbtskid)) == runtsk ) {
        tcb_tstat[runtsk] = TS_DORMANT;
        search_schedtsk();
        (void)make_active(runtsk);
    } else {
        if ((tcb_tstat[TSKID(glbtskid)] != TS_DORMANT)
            && (tcb_actcnt[tskid] >= tinib_maxact[tskid])) {
            ercd = E_OS_LIMIT;
            goto d_error_exit;
        }
        tcb_tstat[runtsk] = TS_DORMANT;
        search_schedtsk();
        if (tcb_actcnt[runtsk] > 0) {
            tcb_actcnt[runtsk] -= 1;
            (void)make_active(runtsk);
        }
        if (tcb_tstat[tskid] == TS_DORMANT) {
            (void)make_active(TSKID(glbtskid));
        }
        else {
            tcb_actcnt[tskid] += 1;
        }
    }
    exit_and_dispatch();
  }
  
  void after_check_callevel() {
    CHECK_RESOURCE(tcb_lastres[runtsk] == RESID_NULL);
  }

  void set_flg() { }
  
  void after_set_tsk_location() {
    if (tsk_location == this.call_os) {
      this.set_flg()
      this.request_sending_service(glbtskid_store, OSServiceId_ChainTask, 0xFFFFFFFF)
      ercd = (UINT8)(this.get_return_value());
      this.after_sending_msg()
    }
  }
  
  void after_sending_msg() {
    tcb_tstat[runtsk] = TS_DORMANT;
    search_schedtsk();
    if (tcb_actcnt[runtsk] > 0) {
      tcb_actcnt[runtsk] -= 1;
      (void)make_active(runtsk);
    }
    exit_and_dispatch();
  }
}